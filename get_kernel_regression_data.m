function data = get_kernel_regression_data( sitecode, varargin)
% GET_KERNEL_REGRESSION_DATA - parse ameriflux files to grab necessary data
%

args = inputParser;
args.addRequired( 'sitecode', @(x) ( isintval( x ) | isa( x, 'UNM_sites' ) ) );
date_validation_min = @(x) isnumeric(x) && x(1) > datenum('2005-12-31') ;
date_validation_max = @(x) isnumeric(x) && x(1) < datenum(now) ;
args.addOptional( 'date_start', [], date_validation_min );
args.addOptional( 'date_end', [], date_validation_max );

args.parse( sitecode, varargin{:} );
sitecode = args.Results.sitecode;
date_start = args.Results.date_start;
date_end = args.Results.date_end;

fprintf( 'parsing %s %d\n', char( UNM_sites( sitecode ) ) );
site_info = parse_yaml_config( sitecode , 'SiteVars');
aflx_site_name = site_info.ameriflux_name;

fname_flux = fullfile( 'C:' , 'Code', 'NMEG_utils',...
    'processed_data', 'daily_aflx',...
    'FLUXNET2015_c',... %'NMEG',...
    [ aflx_site_name , '_daily_aflx.csv']);
fname_soil = fullfile( 'C:' , 'Code', 'NMEG_utils',...
    'processed_data', 'daily_soilmet',...
    [ aflx_site_name , '_daily_soilmet.csv']);


if not( exist( fname_flux ) ) | not( exist( fname_soil ) )
    % if the input data are not present, exit now
    data = [];
else
    
    aflx_data = parse_aflx_daily_file( fname_flux );
    aflx_soil = parse_aflx_daily_file( fname_soil );
    
    % fill in missing PAR from global radiation (Rg)
    % Reading in filled data now. Ignore
    
    % idx = isnan( aflx_data.PAR );
    % aflx_data.PAR( idx ) = ( aflx_data.Rg( idx ) .* 2.1032 ) - 8.2985;
    
    %--------------
    % Line up timestamps from soil and flux data
    if ( length( aflx_data.TIMESTAMP ) ~= length( aflx_soil.TIMESTAMP ) )
        
        % aflx_soil.TIMESTAMP = ...
        %    datenum( aflx_soil.YEAR, 1, 0 ) + aflx_soil.DTIME;
        t_min = ...
            min( [ aflx_data.TIMESTAMP; aflx_soil.TIMESTAMP ] );
        t_max = ...
            max( [ aflx_data.TIMESTAMP; aflx_soil.TIMESTAMP ] );
        %         two_minutes = 2 / ( 24 * 60 );  % two mins in units of days
        %         [ aflx_data, aflx_soil ] = ...
        %             merge_tables_by_datenum( aflx_data, aflx_soil, ...
        %             'TIMESTAMP', 'TIMESTAMP', ...
        %             two_minutes, ...
        %             t_min, t_max );
        del_t = 1;
        aflx_data = table_fill_timestamps( aflx_data, ...
            'TIMESTAMP', ...
            'delta_t', del_t,...
            't_min', t_min, ...
            't_max', t_max );
        
        aflx_soil = table_fill_timestamps( aflx_soil, ...
            'TIMESTAMP', ...
            'delta_t', del_t,...
            't_min', t_min, ...
            't_max', t_max );
    end
    
    if ~isempty(date_start)
        discard_idx = ( ( aflx_data.TIMESTAMP < date_start ) | ...
            ( aflx_data.TIMESTAMP  > date_end ) );
        aflx_data( discard_idx, : ) = [];
        aflx_soil( discard_idx, : ) = [];
    end
    
    %     Avg_vwc_cols = replace_hex_chars( aflx_soil.Properties.VarNames );
    %     [ idx, depths ] = regexp( Avg_vwc_cols, ...
    %                               'VWC_([0-9\.]*)(cm)?_Avg', ...
    %                               'match', 'tokens' );
    %     idx = find( not( cellfun( @isempty, idx ) ) );
    %     %depths = regexp( Avg_vwc_cols( idx ), '_', 'split' );
    %     depths = cellfun( @(x) str2num( x{ 1 }{ 1 } ), depths( idx ) );
    
    
    %     % avg SWC 0-5 cm
    %     % SWC_shallow = aflx_soil( :, idx( depths <= 5 ) );
    %
    %     % avg SWC 10-20 cm
    %     % SWC_deep_10_20 = aflx_soil( :, ...
    %                                 idx( ( depths >= 10 ) & ...
    %                                      ( depths < 20 ) ) );
    %     % avg SWC 20-30 cm
    %     SWC_deep_20_30 = aflx_soil( :, ...
    %                                 idx( ( depths >= 20 ) & ...
    %                                      ( depths < 30 ) ) );
    %     % avg SWC > 30 cm
    %     SWC_deep_30plus = aflx_soil( :, idx( depths >= 30 ) );
    %
    %     if size( SWC_shallow, 2 ) >= 1
    %         SWC_shallow = dataset( { mean( double( SWC_shallow ), 2 ), ...
    %                             'SWC_shallow' } );
    %     end
    %     if size( SWC_deep_10_20, 2 ) >= 1
    %         SWC_deep_10_20 = dataset( { mean( double( SWC_deep_10_20 ), 2 ), ...
    %                             'SWC_deep_10_20' } );
    %     end
    %     if size( SWC_deep_20_30, 2 ) >= 1
    %         SWC_deep_20_30 = dataset( { mean( double( SWC_deep_20_30 ), 2 ), ...
    %                             'SWC_deep_20_30' } );
    %     end
    %     if size( SWC_deep_30plus, 2 ) >= 1
    %         SWC_deep_30plus = dataset( { mean( double( SWC_deep_30plus ), 2 ), ...
    %                             'SWC_deep_30plus' } );
    %     end
    %
    %     % if a SWC depth range has no observations in a site-year, fill with
    %     % NaN.
    %     if isempty( SWC_shallow )
    %         SWC_shallow = dataset( { repmat( NaN, size( aflx_data, 1 ), 1 ), ...
    %                             'SWC_shallow' } );
    %     end
    %     if isempty( SWC_deep_10_20 )
    %         SWC_deep_10_20 = dataset( { repmat( NaN, size( aflx_data, 1 ), 1 ), ...
    %                             'SWC_deep_10_20' } );
    %     end
    %     if isempty( SWC_deep_20_30 )
    %         SWC_deep_20_30 = dataset( { repmat( NaN, size( aflx_data, 1 ), 1 ), ...
    %                             'SWC_deep_20_30' } );
    %     end
    %     if isempty( SWC_deep_30plus )
    %         SWC_deep_30plus = dataset( { repmat( NaN, size( aflx_data, 1 ), 1 ), ...
    %                             'SWC_deep_30plus' } );
    %     end
    
    % GREG'S VARIABLE NAMES ARE shall_swc mid_swc deep_swc
    
    %     data = [ aflx_data( :, 'YEAR' ), ...
    %              aflx_data( :, 'DOY' ), ...
    %              aflx_data( :, 'HRMIN' ), ...
    %              aflx_data( :, 'DTIME' ), ...
    %              aflx_data( :, 'TA' ), ...
    %              aflx_data( :, 'PRECIP' ), ...
    %              aflx_soil( :, ', ...
    %              SWC_deep_10_20, ...
    %              SWC_deep_20_30, ...
    %              SWC_deep_30plus, ...
    %              aflx_data( :, 'FC' ), ...
    %              aflx_data( :, 'RE' ), ...
    %              aflx_data( :, 'GPP' ), ...
    %              aflx_data( :, 'PAR' ) ];
    [YEAR , ~ , ~ ]  = datevec(aflx_data.TIMESTAMP);
    
    
    DOY = aflx_data.TIMESTAMP - datenum( YEAR, 1, 1 ) + 1;
    % Use this flag to skip this table definition while testing code
    testflag = false;
    if testflag
        data =  table( aflx_data.TIMESTAMP , ...
            DOY,...
            aflx_data.NIGHT, ...
            aflx_data.FC_F_g_int,...
            aflx_data.GPP_g_int,...
            aflx_data.RECO_g_int,...
            aflx_data.PPFD_IN_avg,...
            aflx_data.TA_F_avg,...s
            aflx_data.P_F_sum,...
            aflx_soil.shall_swc,...
            aflx_soil.mid_swc,...
            aflx_soil.deep_swc);
        data.Properties.VariableNames = {'TIMESTAMP' 'DOY', 'NIGHT'...
            'FC' 'GPP' 'RE',...
            'PAR' 'TA' 'PRECIP' ...
            'SWC_SHALL' 'SWC_MID' 'SWC_DEEP'};
    else
        data =  table( aflx_data.TIMESTAMP , ...
            DOY,...
            aflx_data.FC_F_g_int,...
            aflx_data.GPP_g_int,...
            aflx_data.RECO_g_int,...
            aflx_data.PPFD_IN_avg,...
            aflx_data.TA_F_avg,...
            aflx_data.P_F_sum,...
            aflx_data.ET_mm_dayint, ...
            aflx_data.VPD_F_avg,...
            aflx_soil.shall_swc,...
            aflx_soil.shall_swc_night,...
            aflx_soil.shall_swc_day,...
            aflx_soil.mid_swc,...
            aflx_soil.deep_swc);
        data.Properties.VariableNames = {'TIMESTAMP' 'DOY',...
            'FC' 'GPP' 'RE',...
            'PAR' 'TA' 'PRECIP' 'ET_mm_dayint','VPD_AVG',...
            'SWC_SHALL' 'SWC_SHALL_NIGHT' 'SWC_SHALL_DAY' 'SWC_MID' 'SWC_DEEP'};
    end
    
    % convert from dataset array to double array
    % data = double( data );
    %data.DOY = floor( data.DOY );  % remove fractional DOY
    
end  % if ameriflux files exist