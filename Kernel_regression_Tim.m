function results = Kernel_regression_Tim( load_stored_data )
% KERNEL_REGRESSION_TIM - main function for Kernel regressions
   


%load_stored_data = false;
% shallow_night = cell( 6, 1 );
% shallow_day = cell( 6, 1 );
shallow = cell( 8 , 1 );
mid = cell( 8 , 1);
deep = cell( 8 ,1);
% deep_10_20_day = cell( 6, 1 );
% deep_20_30_day = cell( 6, 1 );
% deep_30plus_day = cell( 6, 1 );
 all_agg_data = cell( 8, 1 );
 climspace_shallow = cell( 8, 1 );
 climspace_mid = cell( 8, 1 );
 climspace_deep = cell( 8, 1 );
% climspace_deep1 = cell( 6, 1 );
% climspace_deep2 = cell( 6, 1 );
% climspace_deep3 = cell( 6, 1 );
results = cell( 8, 1 );
%colormap_greens = flipud( cbrewer( 'seq', 'YlGn', 100 ) );

% sitecode key
% % I don't think this is used for anything...
% afnames(1,:) = 'US-Seg'; % 1-GLand
% afnames(2,:) = 'US-Ses'; % 2-SLand
% afnames(3,:) = 'US-Sen';
% afnames(4,:) = 'US-Wjs'; % 3-JSav
% afnames(5,:) = 'US-Mpj'; % 4-PJ
% 
% afnames(6,:) = 'US-Vcp'; % 5-PPine
% afnames(7,:) = 'US-Vcm'; % 6-MCon
% 
% %afnames(7,:) = 'US-FR2'; % 7-TX_savanna

colour(1,:)=[0.9 0.5 0.0];
colour(2,:)=[0.6 0.2 0];
colour(3,:)=[0.25 1.0 0.0];
colour(4,:)=[0.0 0.5 0.0];
colour(5,:)=[0.5 0.5 1.0];
colour(6,:)=[0.0 0.0 0.6];

firstday(1)=151;
firstday(2)=90;
firstday(3)=59;
firstday(4)=59;
firstday(5)=90;
firstday(6)=120;

lastday(1)=272;
lastday(2)=272;
lastday(3)=303;
lastday(4)=303;
lastday(5)=303;
lastday(6)=303;

firstday = repmat( 1, 1, 6 );
lastday = repmat( 365, 1, 6 );
fprintf( 'CONSIDERING DOY 1 TO 365!\n' );

yax_min = [ 0.025, 0.025, 0.05, 0.05, 0.05, 0.05 ];
yax_max = [ 0.15, 0.15, 0.225, 0.225, 0.22, 0.22 ];
xax_min = [ -8, -8, -8, -8, -8, -8 ];
xax_max = [ 28, 28, 24, 24, 19, 19 ];

if load_stored_data
    load( 'kernel_regression_parsed_data.mat' );
else
    all_data = cell( 8, 1 );
end

sitelist = {UNM_sites.MCon, UNM_sites.PPine, ...
    UNM_sites.SLand, UNM_sites.GLand, UNM_sites.New_GLand, ...
    UNM_sites.JSav,  UNM_sites.PJ, UNM_sites.PJ_girdle };

for  i = 1:length(sitelist)
    sitecode = sitelist{i};
    % parsing takes a minutes -- option to load saved data
    if load_stored_data
        data = all_data{ i };        
    else
        data = get_kernel_regression_data( sitecode );
        all_data{ i } = data;
    end
    
    
    
    % define some conversion factors
    mu2e=(1*60*30)./1000000; 
    mu2g=((1./1000000)*12)*60*30;
    
    % only consider data during growing season
%     growing_season = ( ( data.DOY >= firstday( sitecode ) ) & ...
%                        ( data.DOY <= lastday( sitecode ) ) );
%     data = data( find( growing_season ), : );
%     
%  Tims code separates NEE into day and nighttime values, but our files no    
%     % separate NEE into daytime, nighttime
%     data.NEE_day = data.FC .* mu2g;
%     data.NEE_day( ( data.HRMIN <= 530 ) | ( data.HRMIN >= 1830 ) ) = NaN;
%     data.NEE_night = data.FC .* mu2g;
%     data.NEE_night( ( data.HRMIN > 530 ) & ( data.HRMIN < 1830 ) ) = NaN;
    
    % replace -9999 with NaN
%     data_dbl = double( data );
%     data = replacedata( data, replace_badvals( data_dbl, ...
%                                                [-9999], ...
%                                                1e-6 ) );

    % give each day a unique integer index starting with 1 Jan 2007 = 1
%     day_idx = datenum( data.YEAR, 1, 0 ) + data.DOY - ...
%               datenum( 2007, 1, 0 );    
    %  day_idx = data.TIMESTAMP - datenum(2007,1,0);

    % aggregate the data by daily sum or daily mean, as appropriate for each
    % observation
%     vars_to_avg = { 'TA', 'SWC_shallow', 'SWC_deep_10_20', ...
%                     'SWC_deep_20_30', 'SWC_deep_30plus', 'PAR' };
%     vars_to_sum = { 'NEE_day', 'NEE_night', 'RE', 'GPP', 'PRECIP' };
% 
%     [ sum_day_idx, agg_sums ] = ...
%         consolidator( day_idx, ...
%                       double( data( :, vars_to_sum ) ), ...
%                       @nansum );
%     [ mean_day_idx, agg_means ] = ...
%         consolidator( day_idx, ...
%                       double( data( :, vars_to_avg ) ), ...
%                       @nanmean );
% 
%     % calculate timestamps for  aggregated data
%     agg_data = [ dataset( { agg_sums, vars_to_sum{ : } } ), ...
%                  dataset( { agg_means, vars_to_avg{ : } } ) ];
%     agg_dates = datenum( 2007, 1, 0 ) + mean_day_idx;
%     [ year, ~, ~, ~, ~, ~ ] = datevec( agg_dates );
%     agg_data.YEAR = year;
%     agg_data.DOY = agg_dates - datenum( year, 1, 0 );
%     
    % calculate climate space for this site
    
    [year,~,~]=datevec(data.TIMESTAMP);
    climspace_shallow = ...
        calculate_climate_space( sitecode, ...
                                 data.TA, ...
                                 data.SWC_SHALL, ...
                                 year, ...
                                 6);
    climspace_mid = ...
        calculate_climate_space( sitecode, ...
                                 data.TA, ...
                                 data.SWC_MID, ...
                                 year, ...
                                 23);
    climspace_deep = ...
        calculate_climate_space( sitecode, ...
                                 data.TA, ...
                                 data.SWC_DEEP, ...
                                 year, ...
                                 60);
%     climspace_deep3 = ...
%         calculate_climate_space( sitecode, ...
%                                  agg_data.TA, ...
%                                  agg_data.SWC_deep_30plus, ...
%                                  agg_data.YEAR, ...
%                                  30);
    
    % remove data from days with precipitation or days following days with
    % precipitation
    pcp_remove = find( data.PRECIP > 0 );
    
%     figure();
%     plot( agg_data.SWC_deep_20_30, '.' );
%     hold on;
%     plot( pcp_remove, agg_data.SWC_deep_20_30( pcp_remove), '.r' );
    
    %pcp_remove = unique( [ pcp_remove; ( pcp_remove + 1 ) ] );
    pcp_remove( pcp_remove > size( data, 1 ) ) = [];
    data( pcp_remove , : ) = [];
            
    all_agg_data{ i } = data;
    % Temperature response

    % Daily NEE
    
    fprintf( '%s shallow /daily\n', char( UNM_sites( sitecode ) ) );
    shallow = ... 
        kernel_regression_wrapper( sitecode, ...
                                   data.TA, ...
                                   data.SWC_SHALL, ...
                                   data.FC, ...
                                   [ 'kernel regression, ', ...
                        'SWC 0-6 cm, daily' ] );

    fprintf( '%s mid /daily\n', char( UNM_sites( sitecode ) ) );    
    mid = ... 
        kernel_regression_wrapper( sitecode, ...
                                   data.TA, ...
                                   data.SWC_MID, ...
                                   data.FC, ...
                                   ['kernel regression, SWC 6-23 ' ...
                        'cm, daily NEE'] );
    
    fprintf( '%s deep / daily \n', char( UNM_sites( sitecode ) ) );
    deep = ... 
        kernel_regression_wrapper( sitecode, ...
                                   data.TA, ...
                                   data.SWC_DEEP, ...
                                   data.FC, ...
                                   ['kernel regression, SWC 23+ cm, daily NEE'] );
%     
%     fprintf( '%s shallow/day\n', char( UNM_sites( sitecode ) ) );    
%     shallow_day = ...
%         kernel_regression_wrapper( sitecode, ...
%                                    agg_data.TA, ...
%                                    agg_data.SWC_shallow, ...
%                                    agg_data.NEE_day, ...
%                                    ['kernel regression, shallow, day'] );
%     fprintf( 'done\n' );
%     
%     fprintf( '%s shallow/night\n', char( UNM_sites( sitecode ) ) );    
%     shallow_night = ...
%         kernel_regression_wrapper( sitecode, ...
%                                    agg_data.TA, ...
%                                    agg_data.SWC_shallow, ...
%                                    agg_data.NEE_night, ...
%                                    ['kernel regression, shallow, night'] );
%     fprintf( 'done\n' );

%     results{ sitecode } = ...
%         site_T_SWC_flux_data( UNM_sites( sitecode ), ...
%                               shallow_night, ...
%                               shallow_day, ...
%                               deep_10_20_day, ...
%                               deep_20_30_day, ...
%                               deep_30plus_day, ...
%                               climspace_shallow, ...
%                               climspace_deep1, ...
%                               climspace_deep2, ...
%                               climspace_deep3, ...
%                               sprintf('%s surfaces', ...
%                                       char( UNM_sites( sitecode ) ) ) );
%                                   
       results{ i } = ...
        site_T_SWC_flux_data( UNM_sites( sitecode ), ...
                              shallow, ...
                              mid, ...
                              deep, ...
                              climspace_shallow, ...
                              climspace_mid, ...
                              climspace_deep, ...
                              sprintf('%s surfaces', ...
                                      char( UNM_sites( sitecode ) ) ) ); 
end  % site loop 

if not( load_stored_data )
    save( 'kernel_regression_parsed_data.mat', 'all_data' );
end
save( 'kernel_regression_aggregated_data.mat', 'all_agg_data' );



%==================================================
function KR_sfc = kernel_regression_wrapper( sitecode, T, SWC, NEE, note_str )
% KERNEL_REGRESSION_WRAPPER - perform kernel regression to calculate
%   NEE = f( T, SWC ).  Store output surface in T_SWC_flux_sfc object.

% whether to do the kernel regression or return the plain histogram

kr_switch = struct( 'do_KR', true, 'hist_only', false );

[ flux_sfc, n_count, swc_bin_ctrs, T_bin_ctrs ] = ...
    calculate_SWC_T_NEE_kernel_regression( T, ...
                                           SWC, ...
                                           NEE, ...
                                           kr_switch.do_KR );

KR_sfc = T_SWC_flux_sfc( UNM_sites( sitecode ), ...
                         swc_bin_ctrs, ...
                         T_bin_ctrs, ...
                         flux_sfc, ...
                         n_count, ...
                         note_str );